#Grr_Plugins  
#Copyright (C) NVINT 2013 
# This program is free software; you can redistribute it and/or modify 
# it under the terms of the GNU General Public License as published by 
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.      
#      
# This program is distributed in the hope that it will be useful, but  
# WITHOUT ANY WARRANTY; without even the implied warranty of   
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU     
# General Public License for more details.     
#      
# You should have received a copy of the GNU General Public License    
# along with this program; if not, write to the Free Software  
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA      
#      
       
"""    
@author:       
@license:      GNU General Public License 2.0 or later 
@contact:      
@organization: NVINT   
"""    
       



#Here is the working PowerShell version: 
$VMName = Read-Host "input Virtual Machine name"
$VHDFiles = Get-VM -VMName $VMName | Select-Object VMId | Get-VHD | Select-Object Path | Format-List


#Here is the Python version. In progress:
import os
#from nova.virt.hyperv import imagecache
class VMOps(object):
    _vif_driver_class_map = {
        'nova.network.neutronv2.api.API':
        'nova.virt.hyperv.vif.HyperVNeutronVIFDriver',
        'nova.network.api.API':
        'nova.virt.hyperv.vif.HyperVNovaNetworkVIFDriver',
    }
    #def __init__(self):
        #self._hostutils = hostutils.HostUtils()
        #self._vmutils = vmutils.VMUtils()
        #self._vhdutils = vhdutils.VHDUtils()
        #self._pathutils = pathutils.PathUtils()
        #self._volumeops = volumeops.VolumeOps()
        #self._imagecache = imagecache.ImageCache()
        #self._vif_driver = None
        #self._load_vif_driver_class()
    
    def _create_root_vhd(self, context, instance):
        #base_vhd_path = self._imagecache.get_cached_image(context, instance)
        #root_vhd_path = self._pathutils.get_vhd_path(instance['name'])
        try:
            if CONF.use_cow_images:
                LOG.debug(_("Creating differencing VHD. Parent: "
                            "%(base_vhd_path)s, Target: %(root_vhd_path)s"),
                          {'base_vhd_path': base_vhd_path,
                           'root_vhd_path': root_vhd_path})
                self._vhdutils.create_differencing_vhd(root_vhd_path,
                                                       base_vhd_path)
            else:
                LOG.debug(_("Copying VHD image %(base_vhd_path)s to target: "
                            "%(root_vhd_path)s"),
                          {'base_vhd_path': base_vhd_path,
                           'root_vhd_path': root_vhd_path})
                self._pathutils.copyfile(base_vhd_path, root_vhd_path)


                base_vhd_info = self._vhdutils.get_vhd_info(base_vhd_path)
                base_vhd_size = base_vhd_info['MaxInternalSize']
                root_vhd_size = instance['root_gb'] * 1024 ** 3


                if root_vhd_size < base_vhd_size:
                    raise vmutils.HyperVException(_("Cannot resize a VHD to a "
                                                    "smaller size"))
                elif root_vhd_size > base_vhd_size:
                    LOG.debug(_("Resizing VHD %(root_vhd_path)s to new "
                                "size %(root_vhd_size)s"),
                              {'base_vhd_path': base_vhd_path,
                               'root_vhd_path': root_vhd_path})
                    self._vhdutils.resize_vhd(root_vhd_path, root_vhd_size)
        except Exception:
            with excutils.save_and_reraise_exception():
                if self._pathutils.exists(root_vhd_path):
                    self._pathutils.remove(root_vhd_path)


        return root_vhd_path

VMName = VMOps()

VMName._create_root_vhd("NVWR", "OpenStack1")



#Here is another version in Python where I've just started "translating" the Microsoft doc (C#) to Python:

import System
import System.Xml
import System.Management

import HyperVSamples


class GetVirtualHardDiskInfoClass:
    
    def DisplayPropertyValue(propertyName, doc): #doc is of type XmlDocument
        xpath = string.Format("//PROPERTY[@NAME = '{0}']/VALUE/child::text()", propertyName)
        node = doc.SelectSingleNode(xpath) #Node is of type XmlNode
        if node == null:
            try:
                propertyName != "ParentPath"
                break
            
            except invalidVHDInfo:
                print "GetVirtualHardDiskInfo returned an invalid CIM_XML instance"
        else:
            Console.WriteLine("{0}:{1}", propertyName, node.Value)
    def DisplayVHDProperties(diskInfo): #diskInfo of type string
        #doc = new XmlDocument() ---dynamically allocated memory in python
        doc.LoadXml(diskInfo)

        #fileSize
        DisplayPropertyValue("FileSize", doc)

        #MaxInternalSize
        DisplayPropertyValue("MaxInternalSize", doc)
        
        #disk type
        DisplayPropertyValue("Type", doc)

        #InUse should be false
        DisplayPropertyValue("InUse", doc)

        #InSavedState should be FALSE
        DisplayPropertyValue("InSavedState", doc)

        #ParentPath
        DisplayPropertyValue("ParentPath", doc)
            
        

    def GetVirtualHardDiskInfo(path):
        scope = ManagementScope("root\virtualization", null) #scope of type ManagementScope: MUST BE DYNAMICALLY ALLOCATED
        imageService = Utility.GetServiceObject(scope, "Msvm_ImageManagementService") #imageService of type ManagementObject
        inParams = imageService.GetMethodParameters("GetVirtualHardDiskInfo") #inParams of type ManagementBaseObject
        inParams["Path"] = path

        outParams = imageService.InvokeMethod("GetVirtualHardDiskInfo", inParams, null) #outParams of type ManagementBaseObject 

        if outParams != null:
           # if (UInt32)outParams["ReturnValue"] == ReturnCode.Completed: NEEDS MORE RESEARCH
                #no error
                #diskInfo = (string)outParams["Info"]: NEEDS MORE RESEARCH
                DisplayVHDProperties(diskInfo)
            else:
                # error occurred
                Console.WriteLine("GetVirtualHardDiskInfo failed. ReturnValue:{0}", (UInt32)outParams["ReturnValue"])
            
        
        else:
            Console.WriteLine("WMI failed")
        

        inParams.Dispose()
        outParams.Dispose()
        imageService.Dispose()
    

    def void Main(string[] args):
    if args != null && args.Length != 1:
        Console.WriteLine("Usage: GetVirtualHardDiskInfo path")
        return
    GetVirtualHardDiskInfo(args[0])
    

